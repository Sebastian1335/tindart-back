// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  userName       String
  email          String   @unique()
  emailValidated Boolean  @default(false)
  password       String
  createdAt      DateTime @default(now())
  description    String?

  post            Post[]
  comment         Comment[]
  following       Follows[]        @relation("SeguidorRelation")
  followers       Follows[]        @relation("SeguidoRelation")
  profilePictures profilePictures?
  LikePost        LikePost[]
  LikeComment     LikeComment[]
  SavePost        SavePost[]
  SharePost       SharePost[]

  WhiteBoard WhiteBoard[]
}

model profilePictures {
  id              Int     @id @default(autoincrement())
  profilePicture  Bytes?
  profileMimeType String?
  wallPicture     Bytes?
  wallMimeType    String?
  userId          Int     @unique()

  user User @relation(fields: [userId], references: [id])
}

model Follows {
  id         Int  @id @default(autoincrement())
  idSeguidor Int
  idSeguido  Int
  Seguidor   User @relation("SeguidorRelation", fields: [idSeguidor], references: [id])
  Seguido    User @relation("SeguidoRelation", fields: [idSeguido], references: [id])
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  image       Bytes
  mimeType    String
  description String
  tags        String[]
  authorId    Int
  createdAt   DateTime @default(now())

  comments  Comment[]
  author    User        @relation(fields: [authorId], references: [id])
  LikePost  LikePost[]
  SavePost  SavePost[]
  SharePost SharePost[]
}

model LikePost {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model SavePost {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model SharePost {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  @@unique([userId, postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  image     Bytes?
  mimeType  String?
  postId    Int
  createdAt DateTime @default(now())
  authorId  Int

  post   Post @relation(fields: [postId], references: [id])
  author User @relation(fields: [authorId], references: [id])

  LikeComment LikeComment[]
}

model LikeComment {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}


model WhiteBoard {
  id Int @id @default(autoincrement())
  title String
  description String
  snapshot Json?
  ownerId Int

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}